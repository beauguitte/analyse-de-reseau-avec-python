# Partitions

```{python}
#| echo: false
import pandas as pd                # manipulation de tableaux
import networkx as nx              # analyse de réseau
import numpy as np                 # statistiques
import matplotlib.pyplot as plt    # visualisation
sommets = pd.read_csv("data/som_d13.csv", sep = ";")
liens = pd.read_csv("data/liens_d13.csv", sep = ";")
sommets[['CODGEO']] = sommets[['CODGEO']].astype('string')
sommets[['MARS']] = sommets[['MARS']].astype('bool')
liens[['Origine']] = liens[['Origine']].astype('string')
liens[['Arrivee']] = liens[['Arrivee']].astype('string')
G = nx.from_pandas_edgelist(liens,source = "Origine",target = "Arrivee", edge_attr="weight",create_using=nx.DiGraph()) 
CC = sorted(nx.weakly_connected_components(G),key=len,reverse=True) 
GD = G.subgraph(CC[0])
GU = nx.create_empty_copy(GD, with_data=True)
GU = nx.to_undirected(GU)
list(list(GU.nodes(data=True))[0][-1].keys())
GU = nx.Graph(GU)
GU.add_edges_from(GD.edges(), weight=0)
for u, v, d in GD.edges(data=True):
    GU[u][v]['weight'] += d['weight']
```

## Cliques et k-cores

La page de la documentation consacrée aux [cliques](https://networkx.org/documentation/stable/reference/algorithms/clique.html) propose x fonctions dont plusieurs sont obsolotètes. Par défaut, `NetworkX` renvoit tous les ous-graphes complets d'ordre 1 à **n**, **n** correspondant au sous-graphe maximal complet et donc à la clique au sens strict du terme.

```{python}
# cliques d'ordre 1 à n
print("Nombre de `cliques' : ", sum(1 for c in nx.find_cliques(GU)))
print("Nombre de sommets dans la plus grande clique : ", max(len(c) for c in nx.find_cliques(GU)))
print("Composition de la plus grande clique \n", max(nx.find_cliques(GU), key=len))
```

Nombre de variations des **k-cores** sont proposées (k-shell, k-crust, k-corona...), elles seront abordées dans une version ultérieure de ce tutoriel.

```{python}
# ordre des k-cores
print(list(nx.k_components(GU)))

# composition du 8-core
list(nx.k_core(GU, k = 8))
```

## Blockmodel

`NetworkX` ne semble pas proposer de méthodes de blockmodeling. La documentation fournit [un script](https://networkx.org/documentation/stable/auto_examples/algorithms/plot_blockmodel.html) créant une partition des sommets créée par une CAH sur la matrice d'adjacence. 

<!-- v2 :`quotient_graph`, stochastic_block_model` -->

## Détection de communautés

Plusieurs méthodes de détection de communautés sont implémentées dans le sous-module `community`. Seule la mesure de la modularité semble disponible pour évaluer la qualité de la partition obtenue.

```{python}
# détection de communautés
louv = nx.community.louvain_communities(GU, seed=123)
print("nb de communautés (louvain) :", len(louv))
louv[1]

#mesure de la modularité
print("modularité (louvain) : ", round(nx.community.modularity(GU, louv),2))

# algorithme maximisant la modularité
greed = nx.community.greedy_modularity_communities(GD)
print("nb de communautés (greedy mod.) :", len(greed))
print("modularité (greedy mod.) : ", round(nx.community.modularity(GD, greed),2))
```

Les lignes qui suivent anticipent sur la section suivante et indiquent comment visualiser les communautés détectées. La première étape est de créer un dictionnaire attribuant à chaque sommet la communauté d'appartenance détectée avec l'algorithme utilisé. 

```{python}
# création d'un dictionnaire vide
louvain_dict = {} 

# boucle qui remplit le dictionnaire
for i,c in enumerate(louv): 
    for CODGEO in c: 
        louvain_dict[CODGEO] = i
        
# ligne optionnelle pour ajouter cet attribut 
# nx.set_node_attributes(GD, louvain_dict, 'louvain')

# choix de l'algorithme de placement des sommets
pos = nx.spring_layout(GU)

# importation d'une palette de couleurs 
# nb de couleurs égal au nombre de classes + 1 (Python commence à 0)
cmap = plt.get_cmap('Paired', max(louvain_dict.values()) + 1)

# visualisation des sommets
nx.draw_networkx_nodes(GU,   # sommets à visualiser
                       pos,  # placement
                       louvain_dict.keys(),  # identifiants
                       node_size=40,         # taille 
                       cmap=cmap,            # palette de couleur
                       node_color=list(louvain_dict.values())) # affecter une couleur différente pour chaque classe
nx.draw_networkx_edges(GU, 
                       pos, 
                       alpha=0.5)  # transparence
```

