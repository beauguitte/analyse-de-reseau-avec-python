reticulate::repl_python()
# installer le module
# pip install networkx
# charger les modules utiles
import pandas as pd                # manipulation de tableaux
import networkx as nx              # analyse de réseau
import numpy as np                 # statistiques
import matplotlib.pyplot as plt    # visualisation
# aide sur une fonction
# ?nom_module.nom_fonction
?nx.find_cliques
?pd.DataFrame.set_index
# liste ordonnée des composantes connexes
CC = sorted(nx.weakly_connected_components(G),
key=len,                            # clé de tri - len = longueur
reverse=True)                       # ordre décroissant
print("Nombre de composantes", len(CC))
# nombre de sommets par composantes
print("Nombre de sommets par composantes",
[len(c) for c in sorted(nx.weakly_connected_components(G),
key=len,
reverse=True)])
# sélection de la composante connexe principale
G0 = G.subgraph(CC[0])
# création d'une version non orientée
G0u = nx.to_undirected(G0)
#| echo: false
import pandas as pd                # manipulation de tableaux
import networkx as nx              # analyse de réseau
import numpy as np                 # statistiques
import matplotlib.pyplot as plt    # visualisation
sommets = pd.read_csv("data/som_d13.csv", sep = ";")
liens = pd.read_csv("data/liens_d13.csv", sep = ";")
sommets[['CODGEO']] = sommets[['CODGEO']].astype('string')
sommets[['MARS']] = sommets[['MARS']].astype('bool')
liens[['Origine']] = liens[['Origine']].astype('string')
liens[['Arrivee']] = liens[['Arrivee']].astype('string')
G = nx.from_pandas_edgelist(liens,source = "Origine",target = "Arrivee", edge_attr="weight",create_using=nx.DiGraph())
# liste ordonnée des composantes connexes
CC = sorted(nx.weakly_connected_components(G),
key=len,                            # clé de tri - len = longueur
reverse=True)                       # ordre décroissant
print("Nombre de composantes", len(CC))
# nombre de sommets par composantes
print("Nombre de sommets par composantes",
[len(c) for c in sorted(nx.weakly_connected_components(G),
key=len,
reverse=True)])
# sélection de la composante connexe principale
G0 = G.subgraph(CC[0])
# création d'une version non orientée
G0u = nx.to_undirected(G0)
nx.is_weighted(G0u)             #True
print("lien ij :", G0["13001"]["13201"]['weight'])
print("lien ji :", G0["13201"]["13001"]['weight'])
print("lien ij non orienté : ", G0u["13001"]["13201"]['weight'])
# afficher le poids entre i et j dans les deux cas
# filtrage des sommets (1)
# sélection des sommets satisfaisant la condition
Mars = [n for n,v in G.nodes(data=True) if v['MARS'] == True]
# création d'un sous-graphe
Gmars = G.subgraph(Mars)
# visualisation
nx.draw_kamada_kawai(Gmars,
with_labels=True)
# filtrage des sommets (1)
# sélection des sommets satisfaisant la condition
Mars = [n for n,v in G.nodes(data=True) if v['MARS'] == True]
# création d'un sous-graphe
Gmars = G.subgraph(Mars)
# visualisation
nx.draw_kamada_kawai(Gmars,
with_labels=True)
# filtrage des sommets (1)
# sélection des sommets satisfaisant la condition
Mars = [n for n,v in G.nodes(data=True) if G.nodes['MARS'] == True]
# création d'un sous-graphe
Gmars = G.subgraph(Mars)
# visualisation
nx.draw_kamada_kawai(Gmars,
with_labels=True)
# filtrage des sommets (2)
# sélection des sommets hors Marseille
nonmars = [n for n,v in G.nodes(data=True) if v['MARS'] == False]
# copier le réseau de départ
Gmars2 = G
# supprimer les communes hors Marseille
Gmars2.remove_nodes_from(nonmars)
# visualisation
nx.draw_kamada_kawai(Gmars2,
with_labels=True)
# filtrer les liens
# paramètres statistiques
liens.describe()
# fixer un seuil (ici la médiane)
seuil = 212
# identifier les liens sous ce seuil, récupérer les identifiants
long_edges = list(filter(lambda e: e[2] < seuil, (e for e in G.edges.data('weight'))))
le_ids = list(e[:2] for e in long_edges)
# créer une copie du réseau de départ
Gsup = G
# supprimer les liens identifiés
Gsup.remove_edges_from(le_ids)
# ordre, taille et visualisation
print("Nb de sommets : ", nx.number_of_nodes(Gsup))
print("Nb de liens : ", nx.number_of_edges(Gsup))
nx.draw_kamada_kawai(Gsup, with_labels=True)
library(quarto)
python
reticulate::repl_python()
import matplotlib.pyplot as plt
library(reticulate)
reticulate::py
library(reticulate)
r-reticulate
